generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  email            String          @unique
  username         String          @unique
  displayName      String
  birthdayDay      Int
  birthdayMonth    String
  birthdayYear     Int
  userImage        String?
  password         String
  groups           UserGroup[]
  color            NoImageColors
  textStatus       String
  onlineStatus     OnlineSatus
  phoneNumber      String?
  friends          User[]          @relation("UserFriends")
  friendsRelation  User[]          @relation("UserFriends")
  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
  sentMessages     Message[]       @relation("Sender")
  receivedMessages Message[]       @relation("Receiver")

  createdAt DateTime @default(dbgenerated("NOW()")) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model Group {
  id    Int           @id @default(autoincrement())
  name  String
  users UserGroup[]
  image String?
  color NoImageColors

  createdAt DateTime @default(dbgenerated("NOW()")) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model UserGroup {
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int

  @@id([userId, groupId])
}

model FriendRequest {
  id        Int                 @id @default(autoincrement())
  status    FriendRequestStatus
  from      User                @relation("SentRequests", fields: [fromId], references: [id])
  fromId    Int
  to        User                @relation("ReceivedRequests", fields: [toId], references: [id])
  toId      Int
  createdAt DateTime            @default(dbgenerated("NOW()")) @db.Timestamptz(3)
}

model Message {
  id         Int      @id @default(autoincrement())
  text       String
  sender     User     @relation("Sender", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("Receiver", fields: [receiverId], references: [id])
  receiverId Int
  createdAt  DateTime @default(dbgenerated("NOW()")) @db.Timestamptz(3)
  updatedAt  DateTime @updatedAt @db.Timestamptz(3)
}

enum NoImageColors {
  orange
  red
  green
  blue
  yellow
}

enum OnlineSatus {
  offline
  online
  idle
  doNotDisturb
}

enum FriendRequestStatus {
  pending
  blocked
}
